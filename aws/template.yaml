# AWS SAM template for Imperial Map serverless backend
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: College Football Imperial Map - Serverless Backend

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
  DatabaseUrl:
    Type: String
    Description: Supabase database connection string
    NoEcho: true
  CfbdApiKey:
    Type: String
    Description: CollegeFootballData API key
    NoEcho: true
  RateLimitRps:
    Type: Number
    Default: 10
    Description: Rate limit for external API calls (requests per second)

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 300
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        DATABASE_URL: !Ref DatabaseUrl
        CFBD_API_KEY: !Ref CfbdApiKey
        RATE_LIMIT_RPS: !Ref RateLimitRps

Resources:
  # Main ingest function - called hourly by EventBridge
  IngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "imperial-map-ingest-${Environment}"
      CodeUri: lambda/ingest/
      Handler: handler.handler
      Description: Ingest game data and apply territory transfers
      Events:
        HourlySchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(1 hour)"
            Description: "Run ingest job every hour"
            Enabled: true
      Environment:
        Variables:
          JOB_TIMEOUT_SECONDS: 600
          
  # Admin API for manual operations
  AdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "imperial-map-admin-${Environment}"
      CodeUri: lambda/admin/
      Handler: handler.handler
      Description: Admin operations for manual ingest and recompute
      Events:
        AdminApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /{proxy+}
            Method: ANY
            
  # REST API for admin operations
  AdminApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "imperial-map-admin-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: !Sub "imperial-map-admin-usage-${Environment}"
          Throttle:
            RateLimit: 10
            BurstLimit: 20

  # API Key for admin operations
  AdminApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub "imperial-map-admin-key-${Environment}"
      Description: "API key for Imperial Map admin operations"
      Enabled: true
      StageKeys:
        - RestApiId: !Ref AdminApi
          StageName: !Ref Environment

  # CloudWatch Log Groups
  IngestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/imperial-map-ingest-${Environment}"
      RetentionInDays: 14

  AdminLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/imperial-map-admin-${Environment}"
      RetentionInDays: 14

  # IAM Role for Lambda functions (if needed for additional AWS services)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

Outputs:
  IngestFunctionArn:
    Description: "ARN of the Ingest Lambda function"
    Value: !GetAtt IngestFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-IngestFunctionArn"
      
  AdminApiUrl:
    Description: "URL of the Admin API"
    Value: !Sub "https://${AdminApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-AdminApiUrl"
      
  AdminApiKey:
    Description: "Admin API Key"
    Value: !Ref AdminApiKey
    Export:
      Name: !Sub "${AWS::StackName}-AdminApiKey"